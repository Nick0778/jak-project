{
  // The "in-game" name of the level. Should be lower case, with dashes (GOAL symbol name)
  // the name of this file, and the folder this file is in must have the same name.
  "long_name": "battle-test",
  // The file name, should be upper case and 8 characters or less.
  "iso_name": "BATTLETEST",
  // The nickname, should be exactly 3 characters
  "nickname": "btt", // 3 char name, all lowercase
  // Background mesh file.
  // Must have vertex colors. Use the blender cycles renderer, bake, diffuse, uncheck color,
  // and bake to vertex colors. For now, only the first vertex color group is used, so make sure you
  // only have 1.
  "gltf_file": "custom_assets/jak3/levels/battle-test/battle-test.glb",

  // automatically set wall vs. ground based on angle. Useful if you don't want to assign this yourself
  "automatic_wall_detection": true,
  "automatic_wall_angle": 45.0,

  // if your mesh has triangles with incorrect orientation, set this to make all collision mesh triangles double sided
  // this makes collision 2x slower and bigger, so only use if really needed
  "double_sided_collide": false,

  // available res-lump tag types:
  // integer types: int32, uint32, enum-int32, enum-uint32
  // float types: float, meters (1 meter = 4096.0 units), degrees (65536.0 = 360Â°)
  // vector types: vector (normal floats), vector4m (meters), vector3m (meters with w set to 1.0), vector-vol (normal floats with w in meters), movie-pos (meters with w in degrees)
  // special types: symbol, type, string, eco-info, cell-info, buzzer-info, water-height
  //
  // examples:
  //
  // adds a float tag 'spring-height' with value of 200 meters (1 meter = 4096.0 units):
  // "spring-height": ["meters", 200.0]
  //
  // adds a degrees tag 'rotoffset':
  // "rotoffset": ["degrees", -45.0]
  //
  // adds a movie-pos tag:
  // "movie-pos": ["movie-pos", [100.22, -25.3, 99.5, 180.0]]
  //
  // adds an enum tag 'options':
  // "options": ["enum-int32", "(fact-options large)"]
  //
  // adds a water-height tag:
  // "water-height": ["water-height", 25.0, 0.5, 2.0, "(water-flags can-swim can-wade)"]
  //
  // adds an eco-info tag:
  // "eco-info": ["eco-info", "(pickup-type health)", 2]
  //
  // adds a 'type' tag (using the "symbol" and "string" lump types works the same way):
  // "spawn-types": ["type", "spyder", "juicer"]

   // The base actor id for your custom level. If you have multiple levels, this should be unique!
   "base_id": 100,

  // All art groups you want to use in your custom level. Will add their models and corresponding textures to the FR3 file.
  "art_groups": ["spydroid-orig-ag"],

   // Any textures you want to include in your custom level.
   // This is mainly useful for textures which are not in the common level files and have no art group associated with them.
   // To get a list of all the textures, you can extract all of the game's textures
   // by setting "save_texture_pngs" to true in the decompiler config.
   // "textures": [],

  "actors" : [
    {
      "aid": 10000, // Entity ID
      "trans": [-716.99, 23.07, 1075.98], // translation
      "etype": "spydroid-orig",  // actor type
      "game_task": "(game-task none)", // associated game task (for powercells, etc)
      "kill_mask": 0,
      "quat": [0, 0.11, 0, 0.99], // quaternion
      "bsphere": [-716.99, 23.07, 1075.98, 10], // bounding sphere
      "lump": {
        "name": "spydroid-orig-1",
        "nav-mesh-actor": ["uint32", 43933],
        "enemy-options": ["enum-uint32", "(enemy-option spawner dormant)"],
        "intro": ["vector4m", 
          [-717.79, 17.62, 1068.48, 1.0],
          [-716.99, 23.07, 1075.98, 1.0]
          ]
      }
    },

    {
      "aid": 20000, // Entity ID
      "trans": [-709.64, 23.13, 1076.00], // translation
      "etype": "spydroid-orig",  // actor type
      "game_task": "(game-task none)", // associated game task (for powercells, etc)
      "kill_mask": 0,
      "quat": [0, 0.11, 0, 0.99], // quaternion
      "bsphere": [-709.64, 23.13, 1076.00, 10], // bounding sphere
      "lump": {
        "name": "spydroid-orig-2",
        "nav-mesh-actor": ["uint32", 43933],
        "enemy-options": ["enum-uint32", "(enemy-option spawner dormant)"],
        "intro": ["vector4m", 
          [-712.06, 17.52, 1067.90, 1.0],
          [-709.64, 23.13, 1076.00, 1.0]
          ]
      }
    },

    {
      "aid": 30000, // Entity ID
      "trans": [-702.85, 23.14, 1074.17], // translation
      "etype": "spydroid-orig",  // actor type
      "game_task": "(game-task none)", // associated game task (for powercells, etc)
      "kill_mask": 0,
      "quat": [0, 0.11, 0, 0.99], // quaternion
      "bsphere": [-702.85, 23.14, 1074.17, 10], // bounding sphere
      "lump": {
        "name": "spydroid-orig-3",
        "nav-mesh-actor": ["uint32", 43933],
        "enemy-options": ["enum-uint32", "(enemy-option spawner dormant)"],
        "intro": ["vector4m", 
          [-705.30, 17.14, 1064.44, 1.0],
          [-702.85, 23.14, 1074.17, 1.0]
          ]
      }
    },

    {
      "aid": 40000, // Entity ID
      "trans": [-706.83, 22.93, 1086.32], // translation
      "etype": "battle",  // actor type
      "game_task": "(game-task none)", // associated game task (for powercells, etc)
      "kill_mask": 0,
      "quat": [0, 0, 0, 1], // quaternion
      "bsphere": [-706.83, 22.93, 1086.32, 10], // bounding sphere
      "lump": {
        "name": "battle-1",
        "extra-id": ["int32", 23], // The battle info ID. Check 'battle.gc'
        "alt-actor": ["uint32", 10000, 20000, 30000] // The list of entities used in this battle
      }
    }
  ]
}