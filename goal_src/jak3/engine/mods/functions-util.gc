;;-*-Lisp-*-
(in-package goal)

;;This returns true or false if jak is within a bubble defined by coordiantes and width
(defun in-bubble? ((x float) (y float) (z float) (w float))
  (<= 
    (vector-vector-distance 
      (target-pos 0) 
      (set-vector! (new-stack-vector0) x y z 1.0)
      )
    (/ w 2.0)
    )
  )

(defun in-bubble-m? ((x float) (y float) (z float) (w float))
  (in-bubble? (meters x) (meters y) (meters z) (meters w))
  )

(defun load-levels-in-bubble! ((x float) (y float) (z float) (w float) (lev0 symbol) (lev1 symbol) (lev2 symbol))
  (when (in-bubble-m? x y z w)
    (when (or (!= (level-status? *level* lev0 #f) 'active) (!= (level-status? *level* lev1 #f) 'active) (!= (level-status? *level* lev2 #f) 'active))
      (let ((a1-1 (new 'stack-no-clear 'array 'symbol 10)))
        (set! (-> a1-1 9) #f)
        (set! (-> a1-1 8) #f)
        (set! (-> a1-1 7) #f)
        (set! (-> a1-1 6) #f)
        (set! (-> a1-1 5) #f)
        (set! (-> a1-1 4) #f)
        (set! (-> a1-1 3) #f)
        (set! (-> a1-1 2) lev2)
        (set! (-> a1-1 1) lev1)
        (set! (-> a1-1 0) lev0)
        (want-levels *load-state* a1-1)
        (want-display-level *load-state* lev2 'display)
        (want-display-level *load-state* lev1 'display)
        (want-display-level *load-state* lev0 'display)
        )
      )
    )
  (none)
  )

(defun set-pair-script! ((entity-name string) (tag-name symbol) (pair-action pair))
  (when (entity-by-name entity-name)
    (set! (cdr (res-lump-struct (entity-by-name entity-name) tag-name pair)) pair-action)
    )
  (none)
  )

(defun clear-kill-mask! ((entity-name string) (task-mask task-mask))
  (when (entity-by-name entity-name)
    (logclear! (-> (entity-by-name entity-name) extra kill-mask) task-mask)
    )
  (none)
  )

(defun add-data-to-entity! ((entity-name string) (tag-name symbol) (elt-count int) (elt-type type) (data pointer))
  (when (entity-by-name entity-name)
    (add-data! (entity-by-name entity-name) (new 'static 'res-tag :name tag-name :key-frame -1000000000.0 :elt-count elt-count :elt-type elt-type) (the pointer data))
    )
  (none)
  )

(defun set-region-data! ((id int) (event-name string) (data pair))
  (cond
    ((string= event-name "on-enter")
      (set! (-> (region-lookup-by-id id) on-enter) data)
      )
    ((string= event-name "on-inside")
      (set! (-> (region-lookup-by-id id) on-inside) data)
      )
    ((string= event-name "on-exit")
      (set! (-> (region-lookup-by-id id) on-exit) data)
      )
    (else
      (format 0 "ERROR: invalid event-name!~%")
      )
    )
  (none)
  )

(defun set-entity-tag-data! ((entity-name string) (elt-type type) (tag-idx int) (data pointer))
  (when (entity-by-name entity-name)
    (cond
      ((= elt-type int32)
        (set! (-> (the (pointer int32) (get-tag-index-data (entity-by-name entity-name) tag-idx))) (the int data))
        )
      ((= elt-type uint32)
        (set! (-> (the (pointer uint32) (get-tag-index-data (entity-by-name entity-name) tag-idx))) (the uint data))
        )
      ((= elt-type pair)
        (set! (-> (the (pointer pair) (get-tag-index-data (entity-by-name entity-name) tag-idx))) (the pair data))
        )
      ((= elt-type float)
        (set! (-> (the (pointer float) (get-tag-index-data (entity-by-name entity-name) tag-idx))) (the float data))
        )
      (else
        (format 0 "ERROR: Unknown data type `~S~` for `~S~`tag data~%!" (the string elt-type) entity-name)
        )
      )
    )
  (none)
  )
