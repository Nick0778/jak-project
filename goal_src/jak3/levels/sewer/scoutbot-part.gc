;;-*-Lisp-*-
(in-package goal)

;; failed to figure out what this is:
(defpart 3685
  :init-specs ((:texture (gun-blue-beam level-default-sprite))
    (:birth-func 'birth-func-setup-beam)
    (:num 1.0)
    (:scale-x (meters 0.3) (meters 0.1))
    (:scale-y (meters 100) (meters 20))
    (:r 128.0)
    (:g 128.0)
    (:b 128.0)
    (:a 16.0)
    (:fade-a 0.8)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 left-multiply-quat))
    (:userdata :data (new 'static 'boxed-array :type int32 30 0 0 #x401000 #x401200))
    (:func 'sparticle-texture-animate)
    (:next-time (seconds 0.05))
    (:next-launcher 3686)
    )
  )

;; failed to figure out what this is:
(defpart 3686
  :init-specs ((:scalevel-x (meters 0.033333335))
    (:scalevel-y (meters -0.13333334))
    (:fade-r 0.85333335)
    (:fade-g 0.85333335)
    (:fade-b 0.85333335)
    (:fade-a -0.21333334 -0.42666668)
    (:accel-y (meters 0.000033333334))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-13 sp-cpuinfo-flag-14 left-multiply-quat))
    (:next-time (seconds 0.5))
    (:next-launcher 3687)
    )
  )

;; failed to figure out what this is:
(defpart 3687
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0))
  )

;; failed to figure out what this is:
(defpart 3688
  :init-specs ((:texture (gun-yellow-muzzleflash level-default-sprite))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 2) (meters 5))
    (:scale-y (meters 10) (meters 0.6))
    (:r 128.0)
    (:g 110.0)
    (:b 64.0)
    (:a 128.0)
    (:scalevel-x (meters 0.08))
    (:fade-r -3.2)
    (:fade-g -3.2)
    (:fade-b -6.4)
    (:fade-a -6.4)
    (:timer (seconds 0.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

;; failed to figure out what this is:
(defpart 3689
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 5.0)
    (:y (meters 0.25))
    (:scale-x (meters 18) (meters 2))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 64.0 64.0)
    (:g :copy r)
    (:b :copy r)
    (:a 16.0 16.0)
    (:omega (degrees 0))
    (:vel-y (meters 0.053333335) (meters 0.026666667))
    (:scalevel-x (meters 0.01) (meters 0.006666667))
    (:rotvel-z (degrees -0.4) (degrees 0.8))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.2 -0.2)
    (:friction 0.85 0.04)
    (:timer (seconds 0.535))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-13))
    (:conerot-x (degrees -45) (degrees 10))
    (:conerot-y (degrees 85) (degrees 10))
    (:rotate-y (degrees 0))
    (:conerot-radius (meters 0) (meters 0.4))
    )
  )

;; failed to figure out what this is:
(defpartgroup group-gun-scoutbot-shot-hit
  :id 1045
  :duration (seconds 0.017)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 3690 :flags (sp6) :period (seconds 2) :length (seconds 0.017))
    (sp-item 3691 :fade-after (meters 60) :falloff-to (meters 60) :period (seconds 2) :length (seconds 0.017))
    (sp-item 3692 :fade-after (meters 120) :falloff-to (meters 140) :period (seconds 2) :length (seconds 0.017))
    )
  )

;; failed to figure out what this is:
(defpart 3692
  :init-specs ((:texture (motion-blur-part level-default-sprite))
    (:num 8.0 16.0)
    (:scale-x (meters 1.5))
    (:rot-x 4)
    (:scale-y (meters 0.05) (meters 0.05))
    (:r 255.0)
    (:g 255.0)
    (:b 255.0)
    (:a 64.0 64.0)
    (:omega (degrees 0.0675))
    (:vel-z (meters 0.06666667) (meters 0.33333334))
    (:fade-r -0.053333335)
    (:fade-g -2.55)
    (:fade-b -5.1)
    (:fade-a -0.42666668 -0.42666668)
    (:accel-y (meters -0.0013333333) (meters -0.001))
    (:friction 0.875)
    (:timer (seconds 0.5))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-13))
    (:func 'sparticle-motion-blur)
    (:conerot-x (degrees 80) (degrees 40))
    (:conerot-y (degrees 80) (degrees 40))
    (:conerot-z (degrees 80) (degrees 40))
    (:conerot-radius (meters 0) (meters 0.2))
    )
  )

;; failed to figure out what this is:
(defpart 3691
  :init-specs ((:texture (bigpuff level-default-sprite))
    (:num 8.0 16.0)
    (:scale-x (meters 0.5) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 128.0)
    (:g 100.0)
    (:b 80.0)
    (:a 32.0 32.0)
    (:vel-z (meters 0) (meters 0.016666668))
    (:scalevel-x (meters 0.0013333333) (meters 0.0033333334))
    (:rotvel-z (degrees -0.3) (degrees 0.6))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.10666667 -0.10666667)
    (:friction 0.95)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-13))
    (:conerot-x (degrees 90) (degrees 20))
    (:conerot-y (degrees 90) (degrees 20))
    (:conerot-z (degrees 90) (degrees 20))
    (:conerot-radius (meters 0) (meters 0.2))
    )
  )

;; failed to figure out what this is:
(defpart 3690
  :init-specs ((:texture (hitspark level-default-sprite))
    (:num 1.0)
    (:sound (static-sound-spec "blue-gun-rico"))
    (:scale-x (meters 0.4) (meters 2))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 230.0 25.0)
    (:g 230.0 25.0)
    (:b 230.0 25.0)
    (:a 128.0)
    (:fade-a -5.12)
    (:timer (seconds 0.085))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:next-time (seconds 0.035))
    (:next-launcher 3693)
    )
  )

;; failed to figure out what this is:
(defpart 3693
  :init-specs ((:scalevel-x (meters 0.12) (meters 0.12)) (:scalevel-y :copy scalevel-x))
  )

;; failed to figure out what this is:
(defpartgroup group-gun-scoutbot-shot-die
  :id 1046
  :duration (seconds 0.017)
  :flags (sp0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 218))
  )

;; failed to figure out what this is:
(defpart 3694
  :init-specs ((:texture (common-white common))
    (:birth-func 'birth-func-set-quat)
    (:num 1.0)
    (:scale-x (meters 1.5))
    (:scale-y (meters 1))
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 sp-cpuinfo-flag-14 left-multiply-quat))
    )
  )

;; definition for function sparticle-scoutbot-fade-alpha-dist
;; WARN: Return type mismatch int vs none.
(defun sparticle-scoutbot-fade-alpha-dist ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 matrix))
  (let ((a0-1 (math-camera-pos))
        (v1-0 (new 'stack-no-clear 'vector))
        )
    0.0
    (set! (-> v1-0 x) (- (-> arg2 rvec x) (-> a0-1 x)))
    (set! (-> v1-0 y) (- (-> arg2 rvec y) (-> a0-1 y)))
    (set! (-> v1-0 z) (- (-> arg2 rvec z) (-> a0-1 z)))
    (let ((f1-3 (vector-length v1-0)))
      (set! (-> arg2 fvec w) (* 128.0 (- 1.0 (* 0.0000024414062 f1-3))))
      )
    )
  0
  (none)
  )

;; failed to figure out what this is:
(defpart 3695
  :init-specs ((:texture (laser-hit-rim level-default-sprite))
    (:num 2.0)
    (:scale-x (meters 1.5))
    (:scale-y :copy scale-x)
    (:r 40.0)
    (:g 40.0)
    (:b 255.0)
    (:a 128.0)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-3))
    (:func 'sparticle-scoutbot-fade-alpha-dist)
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpartgroup scoutbot-muzzle-flare
  :id 1047
  :flags (sp4)
  :bounds (static-bspherem 0 -2 0 24)
  :parts ((sp-item 3696) (sp-item 3697))
  )

;; definition for function sparticle-scoutbot-track-gun-joint
;; WARN: Return type mismatch int vs none.
(defun sparticle-scoutbot-track-gun-joint ((arg0 sparticle-system) (arg1 sparticle-cpuinfo) (arg2 vector))
  (-> arg1 key)
  (let ((v1-1 *target*)
        (a1-1 28)
        )
    (vector<-cspace! (new 'stack-no-clear 'vector) (-> v1-1 node-list data a1-1))
    )
  (set! (-> arg2 x) (-> *target* gun fire-point x))
  (set! (-> arg2 y) (-> *target* gun fire-point y))
  (set! (-> arg2 z) (-> *target* gun fire-point z))
  0
  (none)
  )

;; failed to figure out what this is:
(defpart 3696
  :init-specs ((:texture (glow level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-x (degrees 2.25))
    (:scale-y :copy scale-x)
    (:r 40.0)
    (:g 40.0)
    (:b 255.0)
    (:a 128.0)
    (:omega (degrees 4511.25))
    (:fade-a -5.1)
    (:timer (seconds 0.05) (seconds 0.097))
    (:flags (glow))
    (:userdata 4096.0)
    (:func 'sparticle-scoutbot-track-gun-joint)
    )
  )

;; failed to figure out what this is:
(defpart 3697
  :init-specs ((:texture (laser-hit-rim level-default-sprite))
    (:num 0.5)
    (:scale-x (meters 3) (meters 1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3598.0002))
    (:scale-y :copy scale-x)
    (:r 1.0)
    (:g 1.0)
    (:b 138.0)
    (:a 0.0)
    (:omega (degrees 4511.25))
    (:scalevel-x (meters -0.033333335) (meters -0.016666668))
    (:scalevel-y :copy scalevel-x)
    (:fade-a 2.56)
    (:timer (seconds 2))
    (:flags (sp-cpuinfo-flag-0 sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    (:func 'sparticle-scoutbot-track-gun-joint)
    )
  )

;; failed to figure out what this is:
(defpart 3698
  :init-specs ((:texture (glow-hotdot level-default-sprite))
    (:num 1.0)
    (:scale-x (meters 1))
    (:scale-y :copy scale-x)
    (:r 128.0 64.0)
    (:g 128.0 64.0)
    (:b 128.0 64.0)
    (:a 128.0)
    (:omega (degrees 4511.25))
    (:rotvel-z (degrees 0.3))
    (:fade-g -1.0666667)
    (:fade-b -1.0666667)
    (:fade-a -8.533334)
    (:timer (seconds 0.017))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-14 glow))
    (:userdata 4096.0)
    (:rotate-y (degrees 0))
    )
  )

;; failed to figure out what this is:
(defpart 3699
  :init-specs ((:texture (laser-hit level-default-sprite))
    (:num 2.0)
    (:scale-x (meters 0.1) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3598.0002))
    (:scale-y :copy scale-x)
    (:r 40.0)
    (:g 40.0)
    (:b 255.0)
    (:a 255.0)
    (:omega (degrees 4511.25))
    (:scalevel-x (meters 0.033333335) (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -5.1)
    (:timer (seconds 0.05) (seconds 0.097))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

;; failed to figure out what this is:
(defpart 3700
  :init-specs ((:texture (laser-hit-rim level-default-sprite))
    (:num 0.1)
    (:scale-x (meters 0.1) (meters 0.1))
    (:rot-x (degrees 2.25))
    (:rot-z (degrees 0) (degrees 3598.0002))
    (:scale-y :copy scale-x)
    (:r 40.0)
    (:g 80.0)
    (:b 255.0)
    (:a 255.0)
    (:omega (degrees 4511.25))
    (:scalevel-x (meters 0.016666668) (meters 0.033333335))
    (:scalevel-y :copy scalevel-x)
    (:fade-g -0.8)
    (:fade-a -1.7)
    (:timer (seconds 0.5) (seconds 0.097))
    (:flags (sp-cpuinfo-flag-3 glow))
    (:userdata 4096.0)
    )
  )

;; definition for function scoutbot-fmod-2
(defun scoutbot-fmod-2 ((arg0 float) (arg1 float))
  (- arg0 (* (the float (the int (/ arg0 arg1))) arg1))
  )

;; definition of type scoutbot-shot
(deftype scoutbot-shot (projectile)
  ((init-pos        vector  :inline)
   (init-dir        vector  :inline)
   (collide-normal  vector  :inline)
   )
  )

;; definition for method 3 of type scoutbot-shot
(defmethod inspect ((this scoutbot-shot))
  (when (not this)
    (set! this this)
    (goto cfg-4)
    )
  (let ((t9-0 (method-of-type projectile inspect)))
    (t9-0 this)
    )
  (format #t "~2Tinit-pos: #<vector @ #x~X>~%" (-> this init-pos))
  (format #t "~2Tinit-dir: #<vector @ #x~X>~%" (-> this init-dir))
  (format #t "~2Tcollide-normal: #<vector @ #x~X>~%" (-> this collide-normal))
  (label cfg-4)
  this
  )

;; definition for method 24 of type scoutbot-shot
(defmethod projectile-method-24 ((this scoutbot-shot))
  0
  (none)
  )

;; definition for method 26 of type scoutbot-shot
;; INFO: Used lq/sq
;; ERROR: Error while inserting lets: invalid vector subscript. Make sure that the return type is not none if something is actually returned.
#|(defmethod projectile-method-26 ((this scoutbot-shot))
  (rlet ((vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (let ((s3-1 (vector-! (new 'stack-no-clear 'vector) (-> this root trans) (-> this init-pos))))
      (draw-beam (-> *part-id-table* 3685) (-> this init-pos) s3-1 #t)
      (draw-beam (-> *part-id-table* 3688) (-> this init-pos) (-> this starting-dir) #f)
      (let ((s5-0 (-> *part-id-table* 3692)))
        (let ((s4-0 (-> *part-id-table* 3691)))
          (new 'stack-no-clear 'vector)
          (let ((s2-0 (vector-reflect! (new 'stack-no-clear 'vector) s3-1 (-> this collide-normal))))
            (vector-normalize! s2-0 1.0)
            (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-x))
            (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-y))
            (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-z))
            (let ((a1-7 (new 'stack-no-clear 'matrix)))
              (let ((s1-0 (new 'stack-no-clear 'vector)))
                (let ((s3-2 (new 'stack-no-clear 'vector)))
                  (vector-cross! (-> a1-7 rvec) *y-vector* s2-0)
                  (vector-cross! (-> a1-7 uvec) s2-0 (-> a1-7 rvec))
                  (set! (-> a1-7 fvec quad) (-> s2-0 quad))
                  (matrix->eul (the-as euler-angles s1-0) a1-7 21)
                  (vector-negate! s3-2 s1-0)
                  (let ((a0-14 s3-2))
                    (let ((v1-16 s3-2))
                      (let ((a1-10 -3640.889))
                        (.mov vf6 a1-10)
                        )
                      (.lvf vf4 (&-> v1-16 quad))
                      )
                    (.add.x.vf vf5 vf0 vf0 :mask #b1000)
                    (.add.x.vf vf5 vf4 vf6 :mask #b111)
                    (.svf (&-> a0-14 quad) vf5)
                    )
                  (sparticle-set-conerot s5-0 s3-2)
                  (sparticle-set-conerot s4-0 s3-2)
                  )
                )
              )
            )
          )
        )
      )
    (let ((s5-1 (-> *part-group-id-table* 1045)))
      (cond
        ((logtest? (-> s5-1 flags) (sp-group-flag sp13))
         (let ((s4-1 *launch-matrix*))
           (set! (-> s4-1 trans quad) (-> this root trans quad))
           (let ((gp-1 (get-process *default-dead-pool* part-tracker-subsampler #x4000 0)))
             (when gp-1
               (let ((t9-12 (method-of-type part-tracker-subsampler activate)))
                 (t9-12
                   (the-as part-tracker-subsampler gp-1)
                   *entity-pool*
                   "part-tracker-subsampler"
                   (the-as pointer #x70004000)
                   )
                 )
               (let ((t9-13 run-function-in-process))
                 (let ((a0-22 gp-1))
                   (let ((a1-15 part-tracker-subsampler-init))
                     (let ((v1-24 *part-tracker-subsampler-params-default*))
                       (s.w! v1-24 s5-1)
                       )
                     (set! (-> *part-tracker-subsampler-params-default* duration) 0)
                     (set! (-> *part-tracker-subsampler-params-default* group) #f)
                     (set! (-> *part-tracker-subsampler-params-default* callback) #f)
                     (set! (-> *part-tracker-subsampler-params-default* target) #f)
                     (set! (-> *part-tracker-subsampler-params-default* mat-joint) s4-1)
                     (set! (-> *part-tracker-subsampler-params-default* subsample-num) 1.0)
                     ((the-as (function object object object none) t9-13) a0-22 a1-15 *part-tracker-subsampler-params-default*)
                     )
                   )
                 )
               (let ((v1-32 (-> gp-1 ppointer)))
                 )
               )
             )
           )
         )
        (else
          (let ((s4-2 (get-process *default-dead-pool* part-tracker #x4000 0)))
            (when s4-2
              (let ((t9-15 (method-of-type part-tracker activate)))
                (t9-15 (the-as part-tracker s4-2) *entity-pool* "part-tracker" (the-as pointer #x70004000))
                )
              (let ((t9-16 run-function-in-process))
                (let ((a0-25 s4-2))
                  (let ((a1-18 part-tracker-init))
                    (let ((a3-6 0))
                      )
                    (set! (-> *launch-matrix* trans quad) (-> this root trans quad))
                    ((the-as (function object object object none) t9-16) a0-25 a1-18 s5-1)
                    )
                  )
                )
              (let ((v1-37 (-> s4-2 ppointer)))
                )
              )
            )
          )
        )
      )
    0
    (none)
    )
  )
|#

(defmethod projectile-method-26 ((this scoutbot-shot))
  (rlet ((vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         )
    (init-vf0-vector)
    (let ((s3-1 (vector-! (new 'stack-no-clear 'vector) (-> this root trans) (-> this init-pos))))
      (draw-beam (-> *part-id-table* 3685) (-> this init-pos) s3-1 #t)
      (draw-beam (-> *part-id-table* 3688) (-> this init-pos) (-> this starting-dir) #f)
      (let ((s5-0 (-> *part-id-table* 3692)))
        (let ((s4-0 (-> *part-id-table* 3691)))
          (new 'stack-no-clear 'vector)
          (let ((s2-0 (vector-reflect! (new 'stack-no-clear 'vector) s3-1 (-> this collide-normal))))
            (vector-normalize! s2-0 1.0)
            (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-x))
            (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-y))
            (get-field-spec-by-id s5-0 (sp-field-id spt-conerot-z))
            (let ((a1-7 (new 'stack-no-clear 'matrix)))
              (let ((s1-0 (new 'stack-no-clear 'vector)))
                (let ((s3-2 (new 'stack-no-clear 'vector)))
                  (vector-cross! (-> a1-7 rvec) *y-vector* s2-0)
                  (vector-cross! (-> a1-7 uvec) s2-0 (-> a1-7 rvec))
                  (set! (-> a1-7 fvec quad) (-> s2-0 quad))
                  (matrix->eul (the-as euler-angles s1-0) a1-7 21)
                  (vector-negate! s3-2 s1-0)
                  (let ((a0-14 s3-2))
                    (let ((v1-16 s3-2))
                      (let ((a1-10 -3640.889))
                        (.mov vf6 a1-10)
                        )
                      (.lvf vf4 (&-> v1-16 quad))
                      )
                    (.add.x.vf vf5 vf0 vf0 :mask #b1000)
                    (.add.x.vf vf5 vf4 vf6 :mask #b111)
                    (.svf (&-> a0-14 quad) vf5)
                    )
                  (sparticle-set-conerot s5-0 s3-2)
                  (sparticle-set-conerot s4-0 s3-2)
                  )
                )
              )
            )
          )
        )
      )
    0
    (none)
    )
  )

;; definition for method 27 of type scoutbot-shot
(defmethod projectile-method-27 ((this scoutbot-shot))
  (draw-beam (-> *part-id-table* 3685) (-> this init-pos) (-> this init-dir) #f)
  (draw-beam (-> *part-id-table* 3688) (-> this init-pos) (-> this starting-dir) #f)
  0
  (none)
  )

;; definition for method 28 of type scoutbot-shot
(defmethod play-impact-sound ((this scoutbot-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "scoutbot-gun-fi")
       )
      ((= v1-0 (projectile-options po0))
       (sound-play "blue-shot-hit")
       )
      )
    )
    (none)
  )

;; definition for method 38 of type scoutbot-shot
(defmethod made-impact? ((this scoutbot-shot))
  (let ((v1-0 (-> this root))
        (t1-0 (new 'stack-no-clear 'collide-query))
        )
    (let ((a1-0 t1-0))
      (set! (-> a1-0 radius) (-> v1-0 root-prim prim-core world-sphere w))
      (set! (-> a1-0 collide-with) (-> v1-0 root-prim prim-core collide-with))
      (set! (-> a1-0 ignore-process0) this)
      (set! (-> a1-0 ignore-process1) (ppointer->process (-> this parent)))
      (set! (-> a1-0 ignore-pat)
            (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noendlessfall #x1 :board #x1)
            )
      (set! (-> a1-0 action-mask) (collide-action solid))
      )
    (fill-and-try-snap-to-surface v1-0 (-> v1-0 transv) -12288.0 12697.6 -2048.0 t1-0)
    )
  )

;; definition for function scoutbot-shot-move
(defun scoutbot-shot-move ((arg0 scoutbot-shot))
  (projectile-move-fill-line-sphere arg0)
  (when (logtest? (-> arg0 root status) (collide-status touch-actor))
    )
  (if (logtest? (-> arg0 root status) (collide-status touch-surface))
      (go (method-of-object arg0 impact))
      )
  0
  )

;; definition for function cshape-reaction-scoutbot-shot
;; INFO: Used lq/sq
(defun cshape-reaction-scoutbot-shot ((arg0 control-info) (arg1 collide-query) (arg2 vector) (arg3 vector))
  (vector-reset! arg2)
  (let ((a1-1 (new 'stack-no-clear 'vector)))
    (vector-float*! a1-1 (-> arg1 move-dist) (-> arg1 best-dist))
    (move-by-vector! arg0 a1-1)
    )
  (set! (-> (the-as vector (&-> (-> arg0 process) stack 416)) quad) (-> arg1 best-other-tri normal quad))
  (let ((v0-1 4))
    (logior! (-> arg0 status) v0-1)
    v0-1
    )
  )

;; definition for method 30 of type scoutbot-shot
(defmethod setup-collision! ((this scoutbot-shot))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-scoutbot-shot)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate jak-red-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec
              backgnd
              jak
              bot
              crate
              civilian
              enemy
              obstacle
              vehicle-sphere
              hit-by-others-list
              player-list
              pusher
              shield
              )
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 1228.8)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with) (collide-spec backgnd obstacle pusher shield))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec jak bot crate civilian enemy vehicle-sphere hit-by-others-list player-list)
            )
      (set! (-> v1-15 prim-core action) (collide-action solid))
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1 :board #x1)
        )
  0
  (none)
  )

;; definition for method 31 of type scoutbot-shot
;; INFO: Used lq/sq
(defmethod init-proj-settings! ((this scoutbot-shot))
  (with-pp
    (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 204 (seconds 0.1))
    (set! (-> this init-pos quad) (-> this root trans quad))
    (set! (-> this init-dir quad) (-> this starting-dir quad))
    (vector-normalize-copy! (-> this root transv) (-> this init-dir) (* 491520.0 (-> pp clock frames-per-second)))
    (set! (-> this attack-mode) 'blue-shot)
    (set! (-> this max-speed) (* 491520.0 (-> pp clock frames-per-second)))
    (set! (-> this timeout) 1)
    (set! (-> this move) (the-as (function projectile none) scoutbot-shot-move))
    (vector-reset! (-> this collide-normal))
    (set! (-> this damage) (if (logtest? (game-feature feature22) (-> (the-as game-info *game-info*) features))
                               4.0
                               2.0
                               )
          )
    (set! (-> this vehicle-damage-factor) (* 0.05 (-> this damage)))
    (set! (-> this vehicle-impulse-factor) 8192.0)
    0
    (none)
    )
  )

;; definition of type scoutbot-shot-2
(deftype scoutbot-shot-2 (projectile)
  ((init-pos        vector  :inline)
   (init-dir        vector  :inline)
   (collide-normal  vector  :inline)
   )
  )

;; definition for method 24 of type scoutbot-shot-2
(defmethod projectile-method-24 ((this scoutbot-shot-2))
  0
  (none)
  )

;; definition for method 27 of type scoutbot-shot-2
(defmethod projectile-method-27 ((this scoutbot-shot-2))
  0
  (none)
  )

;; definition for method 25 of type scoutbot-shot-2
(defmethod projectile-method-25 ((this scoutbot-shot-2))
  0
  (none)
  )

;; definition for method 26 of type scoutbot-shot-2
(defmethod projectile-method-26 ((this scoutbot-shot-2))
  0
  (none)
  )