;;-*-Lisp-*-
(in-package goal)

;; name: port-blimp.gc
;; name in dgo: port-blimp
;; dgos: PORTBLMP

(define *port-turret-1-path* (new 'static 'turret-path
    :event-count 4
    :event-tbl (new 'static 'inline-array turret-path-event 4
      (new 'static 'turret-path-event
        :pos (the-as float #x3c23d70a)
        :event-type 'set-speed-mult
        :param (new 'static 'boxed-array :type int32 #xf0)
        )
      (new 'static 'turret-path-event
        :pos (the-as float #x3fcedddd)
        :event-type 'set-rotyvv
        :param (new 'static 'boxed-array :type float -4294965.896)
        )
      (new 'static 'turret-path-event
        :pos (the-as float #x3fe66666)
        :event-type 'script
        :param '(send-event "port-turret-2" 'start-talking)
        )
      (new 'static 'turret-path-event
        :pos (the-as float #x3fe99999)
        :event-type 'set-rotyvv
        :param (new 'static 'boxed-array :type float 0.0)
        )
      )
    )
  )

(deftype port-turret (base-turret)
  ((first-ship-launched    time-frame)
   (last-ship-launched     time-frame)
   (ships-launched         int32)
   (total-ships-launched   uint32)
   (sink-interp            float)
   (num-shots-available    float)
   (last-shot-gained       time-frame)
   (torn                   (pointer port-turret))
   (target-y               float)
   (channel                uint8)
   (id                     uint32)
   (last-speech            uint32)
   (turret-state           uint32)
   (next-turret-state      uint32)
   (previous-turret-state  uint32)
   (who-am-i               uint32)
   )
  )

;; Torn new wave voice lines
(defun new-wave-speech ((arg0 port-turret))
  (when (not (is-any-sound-playing?))
    (let ((v1-3 (rand-vu-int-count 9)))
      (cond
        ((zero? v1-3)
          (play-sound-file "TORN018.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 1)
         (play-sound-file "TORN022.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 2)
         (play-sound-file "TORN023.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 3)
         (play-sound-file "TORN026.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 4)
         (play-sound-file "TORN033.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 5)
         (play-sound-file "TORN037.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 6)
         (play-sound-file "TORN038.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 7)
         (play-sound-file "TORN039.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 8)
         (play-sound-file "TORN047.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        )
      )
    )
  0
  )

;; Torn voice lines when Jak destroy an metal head boat
(defun jak-hit-speech ((arg0 port-turret))
  (when (not (is-any-sound-playing?))
    (let ((v1-3 (rand-vu-int-count 9)))
      (cond
        ((zero? v1-3)
         (play-sound-file "TORN019.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 1)
         (play-sound-file "TORN029.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 2)
         (play-sound-file "TORN030.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 3)
         (play-sound-file "TORN034.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 4)
         (play-sound-file "TORN035.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 5)
         (play-sound-file "TORN040.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 6)
         (play-sound-file "TORN049.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 7)
         (play-sound-file "TORN052.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 8)
         (play-sound-file "TORN056.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        )
      )
    )
  0
  )

;; UNUSED voice lines
(defun jak-miss-speech ((arg0 port-turret))
  (when (not (is-any-sound-playing?))
    (let ((v1-2 (rand-vu-int-count 2)))
      (cond
        ((zero? v1-2)
          (play-sound-file "TORN048.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
          )
        ((= v1-2 1)
          (play-sound-file "TORN051.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
          )
        )
      )
    )
  0
  )

;; Torn voice lines when the metal head boats are close to the portwall
(defun ship-close-speech ((arg0 port-turret))
  (when (not (is-any-sound-playing?))
    (let ((v1-3 (rand-vu-int-count 3)))
      (cond
        ((zero? v1-3)
         (play-sound-file "TORN028.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 1)
         (play-sound-file "TORN053.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 2)
         (play-sound-file "TORN057.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        )
      )
    )
  0
  )

;; UNUSED voice lines
(defun help-speech ((arg0 port-turret))
  (when (not (is-any-sound-playing?))
    (let ((v1-3 (rand-vu-int-count 2)))
      (cond
        ((zero? v1-3)
         (play-sound-file "TORN017.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        ((= v1-3 1)
         (play-sound-file "TORN020.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
         )
        )
      )
    )
  0
  )

(defpartgroup group-port-mh-boat-smoke-trail
  :id 1128
  :linger-duration (seconds 1.5)
  :bounds (static-bspherem 0 0 0 6)
  :parts ((sp-item 4774 :flags (bit7)) (sp-item 4775 :flags (bit6 bit7)))
  )

(defpart 4775
  :init-specs ((:texture (new 'static 'texture-id :index #xbc :page #xc))
    (:num 1.0)
    (:x (meters 0) (meters 2))
    (:y (meters 1))
    (:scale-x (meters 12) (meters 3))
    (:rot-x (degrees 6.7500005))
    (:rot-z (degrees 0) (degrees 3600))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 64.0 128.0)
    (:b 0.0 64.0)
    (:a 12.0 4.0)
    (:omega (degrees 4518))
    (:fade-a -0.8)
    (:timer (seconds 0.067))
    (:flags (sp-cpuinfo-flag-2 sp-cpuinfo-flag-3 glow))
    (:userdata 6144.0)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 4774
  :init-specs ((:texture (new 'static 'texture-id :page #xc))
    (:birth-func 'birth-func-texture-group)
    (:num 0.5)
    (:x (meters 0) (meters 4))
    (:scale-x (meters 8) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 255.0)
    (:g 246.0)
    (:b 149.0)
    (:a 32.0 32.0)
    (:vel-y (meters 0.1) (meters 0.033333335))
    (:scalevel-x (meters 0.026666667) (meters 0.006666667))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -0.14666666)
    (:fade-g -0.7866667)
    (:fade-b -0.88)
    (:fade-a -0.053333335 -0.053333335)
    (:accel-x (meters 0.0013333333) (meters 0.00033333333))
    (:accel-y (meters 0.0001) (meters 0.0001))
    (:friction 0.96)
    (:timer (seconds 8))
    (:flags (sp-cpuinfo-flag-2 use-global-acc))
    (:userdata :data (new 'static 'boxed-array :type int32 40 1 0 #xc00000 #xc00000 #xc03300))
    (:next-time (seconds 0.167) (seconds 0.08))
    (:next-launcher 4776)
    (:rotate-y (degrees 0) (degrees 3600))
    )
  )

(defpart 4776
  :init-specs ((:scalevel-x (meters 0.013333334) (meters 0.0033333334))
    (:scalevel-y :copy scalevel-x)
    (:next-time (seconds 0.25) (seconds 0.08))
    (:next-launcher 4777)
    )
  )

(defpart 4777
  :init-specs ((:scalevel-x (meters 0.006666667) (meters 0.0016666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-r -2.33)
    (:fade-g -1.28)
    (:fade-b -0.17)
    (:next-time (seconds 0.25) (seconds 0.08))
    (:next-launcher 4778)
    )
  )

(defpart 4778
  :init-specs ((:fade-r 0.0) (:fade-g 0.0) (:fade-b 0.0) (:fade-a -0.03 -0.24))
  )

(defskelgroup skel-port-metal-head-boat port-metal-head-boat port-metal-head-boat-lod0-jg port-metal-head-boat-idle-ja
              ((port-metal-head-boat-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 110)
              )

(deftype port-metal-head-boat (process-drawable)
  ((root         collide-shape-moving :override)
   (init-angle   float)
   (position     vector                :inline)
   (forward-dir  vector                :inline)
   (side-dir     vector                :inline)
   (hit-count    int32)
   (hit-ids      int32                 4)
   (hit-max      int32)
   (speed        float)
   (side-speed   float)
   (small        symbol)
   )
  (:state-methods
    idle
    )
  )

;; INFO: Used lq/sq
;; WARN: Return type mismatch object vs none.
(defbehavior port-metal-head-boat-init-by-other port-metal-head-boat ((arg0 entity-actor))
  (let ((s5-0 (new 'process 'collide-shape-moving self (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((v1-6 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-6 prim-core collide-as) (collide-spec obstacle-for-jak))
      (set! (-> v1-6 prim-core collide-with) (collide-spec backgnd jak bot player-list))
      (set! (-> v1-6 prim-core action) (collide-action solid))
      (set! (-> v1-6 transform-index) 3)
      (set-vector! (-> v1-6 local-sphere) 0.0 0.0 0.0 (* 4096.0 (* 15.0 (if arg0
                                                                            0.4
                                                                            1.0
                                                                            )
                                                                   )
                                                         )
                   )
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-6)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-9 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-9 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-9 prim-core collide-with))
      )
    (set! (-> self root) s5-0)
    )
  (let ((s5-1 (new 'stack-no-clear 'vector)))
    (set! (-> s5-1 x)
          (+ (-> (the-as port-turret (-> self parent 0)) root trans x) (rand-vu-float-range -1024000.0 1024000.0))
          )
    (set! (-> s5-1 y) -40960.0)
    (set! (-> s5-1 z) 11468800.0)
    (set! (-> s5-1 w) 1.0)
    (set! (-> self root trans quad) (-> s5-1 quad))
    (set! (-> self position quad) (-> s5-1 quad))
    )
  (quaternion-axis-angle! (-> self root quat) 0.0 1.0 0.0 0.0)
  (set! (-> self hit-count) 0)
  (set! (-> self small) (the-as symbol arg0))
  (cond
    (arg0
      (set-vector! (-> self root scale) 0.4 0.4 0.4 1.0)
      (set! (-> self hit-max) 2)
      (set! (-> self speed) 0.5)
      (set! (-> self side-speed) 0.3)
      )
    (else
      (vector-identity! (-> self root scale))
      (set! (-> self hit-max) 4)
      (set! (-> self speed) 0.3)
      (set! (-> self side-speed) 0.0)
      )
    )
  (let ((s5-2 (new 'stack-no-clear 'vector)))
    (set! (-> s5-2 quad) (-> (target-pos 0) quad))
    (set! (-> s5-2 x)
          (+ (-> (the-as port-turret (-> self parent 0)) root trans x) (rand-vu-float-range -409600.0 409600.0))
          )
    (let ((gp-2 (vector-! (-> self forward-dir) s5-2 (-> self position)))
          (s5-3 (quaternion->matrix (new-stack-matrix0) (-> self root quat)))
          )
      (vector-normalize! gp-2 1.0)
      (vector-float*! (-> self side-dir) (the-as vector (-> s5-3 vector)) 8192.0)
      (let ((s4-0 (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s5-3 vector 1) 1.0)))
        (vector-normalize-copy! (new 'stack-no-clear 'vector) (-> s5-3 vector 2) 1.0)
        (let ((a0-30 (vector-normalize! (vector-flatten! (new 'stack-no-clear 'vector) gp-2 s4-0) 1.0)))
          (set! (-> self init-angle) (vector-y-angle a0-30))
          )
        )
      )
    )
  (vector-float*! (-> self forward-dir) (-> self forward-dir) 8192.0)
  (logclear! (-> self mask) (process-mask actor-pause))
  (logior! (-> self mask) (process-mask enemy))
  (process-entity-status! self (entity-perm-status no-kill) #t)
  (initialize-skeleton
    self
    (the-as
      skeleton-group
      (art-group-get-by-name *level* "skel-port-metal-head-boat" (the-as (pointer uint32) #f))
      )
    (the-as pair 0)
    )
  (go-virtual idle)
  (none)
  )

(defstate idle (port-metal-head-boat)
  :virtual #t
  :enter (behavior ()
    (let ((v0-0 (the-as object (-> self draw color-mult)))) ;; Added - Make metal head boat black like in the prototype
                 (set! (-> (the-as rgbaf v0-0) x) 0.0)
                 (set! (-> (the-as rgbaf v0-0) y) 0.0)
                 (set! (-> (the-as rgbaf v0-0) z) 0.0)
                 (set! (-> (the-as rgbaf v0-0) w) 1.0)
                 v0-0
                 )
    )
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('attack)
       (let ((v1-1 (the-as object (-> block param 1)))
             (a0-2 #t)
             )
         (dotimes (a1-1 (-> self hit-count))
           (if (= (the-as int (-> (the-as port-turret (+ (* a1-1 4) (the-as int self))) smush-control duration))
                  (-> (the-as attack-info v1-1) id)
                  )
               (set! a0-2 #f)
               )
           )
         (when a0-2
           (set! (-> self hit-ids (-> self hit-count)) (the-as int (-> (the-as attack-info v1-1) id)))
           (+! (-> self hit-count) 1)
           (cond
             ((>= (-> self hit-count) (-> self hit-max))
              (jak-hit-speech (the-as port-turret (-> self parent 0)))
              (+! (-> (the-as port-turret (-> self parent 0)) ships-launched) -1)
              (let ((gp-0 (get-process *default-dead-pool* part-tracker #x4000)))
                (when gp-0
                  (let ((t9-2 (method-of-type part-tracker activate)))
                    (t9-2
                      (the-as part-tracker gp-0)
                      *entity-pool*
                      (symbol->string (-> part-tracker symbol))
                      (the-as pointer #x70004000)
                      )
                    )
                  (let ((t9-3 run-function-in-process)
                        (a0-12 gp-0)
                        (a1-6 part-tracker-init)
                        (a2-9 (-> *part-group-id-table* 1128))
                        (a3-5 0)
                        (t0-0 #f)
                        (t1-0 #f)
                        (t2-0 #f)
                        (t3-0 *launch-matrix*)
                        )
                    (set! (-> t3-0 trans quad) (-> self root trans quad))
                    ((the-as (function object object object object object object object object none) t9-3)
                     a0-12
                     a1-6
                     a2-9
                     a3-5
                     t0-0
                     t1-0
                     t2-0
                     t3-0
                     )
                    )
                  (-> gp-0 ppointer)
                  )
                )
              (deactivate self)
              )
             (else
               (process-spawn
                 part-tracker
                 :init part-tracker-init
                 (-> *part-group-id-table* 1128)
                 0
                 #f
                 #f
                 self
                 3
                 :to *entity-pool*
                 )
               (let ((v0-0 (the-as object (-> self draw color-mult))))
                 (set! (-> (the-as rgbaf v0-0) x) 128.0)
                 (set! (-> (the-as rgbaf v0-0) y) 0.0)
                 (set! (-> (the-as rgbaf v0-0) z) 0.0)
                 (set! (-> (the-as rgbaf v0-0) w) 1.0)
                 v0-0
                 )
               )
             )
           )
         )
       )
      )
    )
  :code (behavior ()
    (local-vars (at-0 int))
    (rlet ((vf0 :class vf)
           (vf1 :class vf)
           (vf2 :class vf)
           )
      (init-vf0-vector)
      (until #f
        (ja :num-func num-func-identity :frame-num 0.0)
        (seek! (-> self position y) 0.0 (* 819.2 (-> self clock time-adjust-ratio)))
        (let ((f30-0 (+ 0.5 (* 0.00000014361213 (+ -7987200.0 (-> self position z)))))
              (f28-0 (* 182.04445 (* (the float (-> *display* game-clock frame-counter)) (-> self side-speed))))
              )
          (let ((f26-1 (if (= (-> self side-speed) 0.0)
                           0.0
                           (* 182.04445 (* 30.0 (cos f28-0) f30-0))
                           )
                       )
                )
            (quaternion-axis-angle! (-> self root quat) 0.0 1.0 0.0 (- (-> self init-angle) f26-1))
            (vector+float*!
              (-> self position)
              (-> self position)
              (-> self forward-dir)
              (* (-> self speed) (- 1.0 (* 0.000061035156 (fabs f26-1))))
              )
            )
          (vector+float*! (-> self root transv) (-> self position) (-> self side-dir) (* 10.0 (sin f28-0) f30-0))
          )
        (vector-! (-> self root transv) (-> self root transv) (-> self root trans))
        (let ((v1-25 (-> self root transv)))
          (.lvf vf1 (&-> (-> self root transv) quad))
          (let ((f0-19 (-> self clock frames-per-second)))
            (.mov at-0 f0-19)
            )
          (.mov vf2 at-0)
          (.mov.vf vf1 vf0 :mask #b1000)
          (.mul.x.vf vf1 vf1 vf2 :mask #b111)
          (.svf (&-> v1-25 quad) vf1)
          )
        (if (< (-> self position z) 8335360.0)
            (ship-close-speech (the-as port-turret (-> self parent 0)))
            )
        (when (>= 7987200.0 (-> self position z))
          (send-event (ppointer->process (-> self parent)) 'boom (if (= (-> self hit-max) 1)
                                                                     #x3f800000
                                                                     #x40000000
                                                                     )
                      )
          (+! (-> (the-as port-turret (-> self parent 0)) ships-launched) -1)
          (set! (-> self hit-count) (-> self hit-max))
          (deactivate self)
          )
        (suspend)
        )
      #f
      )
    )
  :post (behavior ()
    (let ((a2-0 (new 'stack-no-clear 'collide-query))
          (gp-0 (-> self root))
          )
      (set! (-> a2-0 collide-with) (-> gp-0 root-prim prim-core collide-with))
      (set! (-> a2-0 ignore-process0) self)
      (set! (-> a2-0 ignore-process1) #f)
      (set! (-> a2-0 ignore-pat) (-> gp-0 pat-ignore-mask))
      (set! (-> a2-0 action-mask) (collide-action solid))
      (fill-cache-integrate-and-collide gp-0 (-> gp-0 transv) a2-0 (meters 0))
      (when (and (logtest? (-> gp-0 status) (collide-status touch-surface))
                 (time-elapsed? (-> self state-time) (seconds 0.01))
                 )
        (send-event (ppointer->process (-> self parent)) 'boom (if (= (-> self hit-max) 1)
                                                                   #x3f800000
                                                                   #x40000000
                                                                   )
                    )
        (+! (-> (the-as port-turret (-> self parent 0)) ships-launched) -1)
        (deactivate self)
        )
      )
    (ja-post)
    )
  )

(deftype port-turret-shot (turret-shot)
  ((backup-pos  vector  :inline)
   (initial-y   float)
   )
  )

(defstate impact (port-turret-shot)
  :virtual #t
  :code (behavior ()
    (let ((f30-0 8192.0))
      (until #f
        (let ((v1-2 (-> self root root-prim)))
          (set! (-> v1-2 prim-core world-sphere w) f30-0)
          (set! (-> (the-as collide-shape-prim-group v1-2) child 1 prim-core world-sphere w) f30-0)
          ;(add-debug-sphere  ;; Remove debug-sphere display
            ;#t
            ;(bucket-id debug-no-zbuf1)
            ;(the-as vector (-> v1-2 prim-core))
            ;(-> v1-2 prim-core world-sphere w)
            ;*color-green*
            ;)
          )
        (let ((a1-1 (new 'stack-no-clear 'overlaps-others-params)))
          (set! (-> a1-1 options) (overlaps-others-options))
          (set! (-> a1-1 collide-with-filter) (the-as collide-spec -1))
          (set! (-> a1-1 tlist) *touching-list*)
          (find-overlapping-shapes (-> self root) a1-1)
          )
        (set! f30-0 (seek f30-0 81920.0 (* 2048.0 (-> self clock time-adjust-ratio))))
        (if (= f30-0 81920.0)
            (go-virtual die)
            )
        (suspend)
        )
      )
    #f
    )
  )

;; INFO: Used lq/sq
;; WARN: Return type mismatch int vs none.
(defun port-turret-shot-move ((arg0 port-turret-shot))
  (set! (-> arg0 root trans quad) (-> arg0 backup-pos quad))
  (projectile-move-fill-line-sphere arg0)
  (if (or (>= 0.0 (-> arg0 root trans y)) (logtest? (-> arg0 root status) (collide-status touch-surface)))
      (go (method-of-object arg0 impact))
      )
  (set! (-> arg0 backup-pos quad) (-> arg0 root trans quad))
  (+! (-> arg0 root trans y) (* 61440.0 (sin (* 32768.0 (/ (-> arg0 root trans y) (-> arg0 initial-y))))))
  (let ((s4-0 (-> arg0 root))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (vector-! s5-0 (-> arg0 tail-pos) (-> s4-0 trans))
    (let ((f0-6 (vector-length s5-0)))
      (when (< 36864.0 f0-6)
        (vector-normalize! s5-0 36864.0)
        (vector+! (-> arg0 tail-pos) (-> s4-0 trans) s5-0)
        )
      )
    )
  0
  (none)
  )

;; INFO: Used lq/sq
;; WARN: Return type mismatch float vs none.
(defmethod init-proj-settings! ((this port-turret-shot))
  "Init relevant settings for the [[projectile]] such as gravity, speed, timeout, etc"
  (let ((t9-0 (method-of-type turret-shot init-proj-settings!)))
    (t9-0 this)
    )
  (set! (-> this backup-pos quad) (-> this root trans quad))
  (set! (-> this move) port-turret-shot-move)
  (set! (-> this initial-y) (-> this root trans y))
  (none)
  )

;; WARN: Return type mismatch int vs none.
;; ERROR: Function may read a register that is not set: t2
(defmethod turret-init! ((this port-turret) (arg0 entity-actor) (arg1 matrix))
  (local-vars (t2-0 none))
  (let ((t9-0 (method-of-type base-turret turret-init!)))
    (t9-0 this arg0 arg1)
    )
  (set! (-> this first-ship-launched) 0)
  (set! (-> this last-ship-launched) 0)
  (set! (-> this shot-timeout) (seconds 2.667))
  (set! (-> this sink-interp) 1.0)
  (set! (-> this roty-min) 0.0)
  (set! (-> this roty-max) 0.0)
  (set! (-> this rotx-min) 0.0)
  (set! (-> this rotx-max) 12743.111)
  (set! (-> this fire-time-interval) (seconds 20))
  (set! (-> this ships-launched) 0)
  (set! (-> this total-ships-launched) (the-as uint 0))
  (set! (-> this num-shots-available) 5.0)
  (set! (-> this available-for-pickup) #f)
  (set! (-> this target-y) 0.0)
  (set! (-> this enable-controls) #f)
  (set! (-> this last-speech) (the-as uint 0))
  (set! (-> this id) (the-as uint 0))
  (cond
    ((name= (-> this name) "port-turret-1")
     (set! (-> this who-am-i) (the-as uint 1))
     (set! (-> this path-event) *port-turret-1-path*)
     (set! (-> this channel) (the-as uint 19))
     (set! (-> this turret-state) (the-as uint 0))
     (set! (-> this previous-turret-state) (the-as uint 1))
     )
    ((name= (-> this name) "port-turret-2")
     (set! (-> this who-am-i) (the-as uint 0))
     (set! (-> this torn) (the-as
                            (pointer port-turret)
                            (process-spawn
                              manipy
                              :init manipy-init
                              (-> this root trans)
                              (-> this entity)
                              (art-group-get-by-name *level* "skel-torn-highres" (the-as (pointer uint32) #f))
                              #f
                              t2-0
                              :name "torn-highres"
                              :to this
                              )
                            )
           )
     (send-event (ppointer->process (-> this torn)) 'art-joint-anim "idle-turret" 0)
     (send-event (ppointer->process (-> this torn)) 'anim-mode 'loop)
     (set! (-> this roty) 5461.3335)
     (set! (-> this num-shots-available) 0.0)
     (set! (-> this channel) (the-as uint 21))
     (set! (-> this turret-state) (the-as uint 2))
     (set! (-> this previous-turret-state) (the-as uint 1))
     )
    )
  0
  (none)
  )

(defmethod base-turret-method-34 ((this port-turret) (arg0 process))
  (set! (-> this hud)
        (ppointer->handle (process-spawn hud-port-turret-health :init hud-init-by-other :to arg0))
        )
  0
  (none)
  )

(defmethod base-turret-method-44 ((this port-turret) (arg0 vector) (arg1 vector))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (set! (-> gp-0 ent) (-> this entity))
    (set! (-> gp-0 charge) 1.0)
    (set! (-> gp-0 options) (projectile-options account-for-target-velocity proj-options-8000))
    (set! (-> gp-0 pos quad) (-> arg0 quad))
    (set! (-> gp-0 vel quad) (-> (vector-normalize-copy! (new 'stack-no-clear 'vector) arg1 945230.8) quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle this))
    (let* ((v1-9 *game-info*)
           (a0-9 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) a0-9)
      (set! (-> gp-0 attack-id) a0-9)
      )
    (set! (-> gp-0 timeout) (* (-> this shot-timeout) 2))
    (spawn-projectile port-turret-shot gp-0 this *default-dead-pool*)
    )
  0
  (none)
  )

(defmethod base-turret-method-45 ((this port-turret) (arg0 object) (arg1 symbol))
  (local-vars (sv-112 vector) (sv-128 vector) (sv-144 vector))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         (vf3 :class vf)
         (vf4 :class vf)
         )
    (init-vf0-vector)
    (when (and (or (= (-> this path-u) 1.0) (zero? (-> this who-am-i))) (< 0.0 (-> this num-shots-available)))
      (let ((s3-0 (new 'static 'array int32 4 11 5 7 11))
            (s4-0 (* (-> this gun-index) 2))
            (s2-0 (+ (* (-> this gun-index) 2) 1))
            (s5-0 (vector-z-quaternion! (new 'stack-no-clear 'vector) (-> this root quat)))
            )
        (set-recoil (the-as joint-mod (-> this gun-recoil-jmod s4-0)) -819.2 arg1)
        (let ((s4-1 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data (-> s3-0 s2-0))))
              (s0-0 (vector<-cspace! (new 'stack-no-clear 'vector) (-> this node-list data 12)))
              (s1-0 (new 'stack-no-clear 'vector))
              (s2-1 (new 'stack-no-clear 'vector))
              )
          (set! sv-144 s0-0)
          (set! sv-112 s0-0)
          (set! sv-128 s5-0)
          (let ((f0-2 (+ 20480.0 (base-turret-method-42 this s0-0 s5-0 819200.0))))
            (.lvf vf2 (&-> sv-128 quad))
            (.lvf vf1 (&-> sv-112 quad))
            (let ((v1-25 f0-2))
              (.mov vf3 v1-25)
              )
            )
          (.add.x.vf vf4 vf0 vf0 :mask #b1000)
          (.mul.x.vf acc vf2 vf3)
          (.add.mul.w.vf vf4 vf1 vf0 acc :mask #b111)
          (.svf (&-> sv-144 quad) vf4)
          (vector-! s1-0 s0-0 s4-1)
          (vector-normalize! s1-0 1.0)
          (base-turret-method-44 this s4-1 s1-0)
          )
        )
      (set! (-> this gun-index) (- 1 (-> this gun-index)))
      (activate! (-> this smush-control) 0.1 30 120 0.8 0.9 (-> *display* entity-clock))
      )
    0
    (none)
    )
  )

(defmethod turret-event-handler ((this port-turret) (arg0 process) (arg1 int) (arg2 symbol) (arg3 event-message-block))
  (case arg2
    (('start-talking)
     (set! (-> this ships-launched) 1)
     (let ((v0-0 (the-as object (current-time))))
       (set! (-> this state-time) (the-as time-frame v0-0))
       v0-0
       )
     )
    (('start-shooting)
     (set! (-> this enable-controls) (the-as symbol #t))
     (set! (-> this roty-min) -32768.0)
     (set! (-> this roty-max) 12743.111)
     )
    (('boom)
     (seek! (-> this health) 0.0 (the-as float (-> arg3 param 0)))
     (activate! (-> this smush-control) 0.2 30 240 0.8 0.8 (-> *display* entity-clock))
     (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 255 (seconds 0.5))
     (sound-play "turret-take-hit") ;; Added - Turret's hit sound
     )
    (('exit)
     (if (= (-> this path-u) 0.0)
         #t
         #f
         )
     )
    (else
      ((method-of-type base-turret turret-event-handler) this arg0 arg1 arg2 arg3)
      )
    )
  )

;; WARN: Return type mismatch smush-control vs none.
(defun manage-torn-turret ((arg0 port-turret) (arg1 object) (arg2 float))
  (with-pp
    (when (and (< 0.0 (-> arg0 num-shots-available)) (< (-> arg0 roty) 2730.6667))
      (let ((t9-0 seek)
            (a0-1 (-> arg0 rotx))
            (a1-1 1820.4445)
            )
        (set! arg2 (* 14.563555 (-> pp clock time-adjust-ratio)))
        (set! (-> arg0 rotx) (t9-0 a0-1 a1-1 arg2))
        )
      )
    (when (and (= (-> arg0 roty) (-> arg0 target-y)) (>= (+ (current-time) (seconds -1)) (-> arg0 shot-timeout)))
      (set! (-> arg0 shot-timeout) (+ (current-time) (rand-vu-int-range 0 (seconds 2))))
      (let ((t9-2 rand-vu-float-range)
            (a0-4 -4551.1113)
            (a1-3 0.0)
            )
        (set! (-> arg0 target-y) (t9-2 a0-4 a1-3))
        (base-turret-method-45 arg0 (the-as none a1-3) (the-as symbol arg2))
        )
      )
    (none)
    )
  )

(defstate idle (port-turret)
  :virtual #t
  :trans (behavior ()
    (cond
      ((= (-> self who-am-i) 1)
       (get-point-at-percent-along-path! (-> self path) (-> self root trans) 0.0 'interp)
       (set! (-> self root trans y) (- (-> self root trans y) (* 122880.0 (-> self sink-interp))))
       (seek! (-> self sink-interp) 0.0 (* 0.005 (-> self clock time-adjust-ratio)))
       (if (= (-> self sink-interp) 0.0)
           (set! (-> self available-for-pickup) (the-as symbol #t))
           )
       )
      ((zero? (-> self who-am-i))
       (let ((t9-2 seek)
             (a0-3 (-> self roty))
             (a1-2 (the-as object (-> self target-y)))
             (a2-2 (the-as number (* 72.81778 (-> self clock time-adjust-ratio))))
             )
         (set! (-> self roty) (t9-2 a0-3 (the-as float a1-2) (the-as float a2-2)))
         (when (and (cpad-pressed? 0 triangle) (= (-> self ships-launched) 1))
            ;; If there are custom audios playing, then, stop them
            (if (is-any-sound-playing?) 
              (stop-all-sounds)
              )
           (logclear! (-> *cpad-list* cpads 0 button0-abs 0) (pad-buttons triangle))
           (logclear! (-> *cpad-list* cpads 0 button0-rel 0) (pad-buttons triangle))
           (set! (-> self ships-launched) 0)
           (let ((gp-0 (new 'stack-no-clear 'event-message-block)))
             (set! (-> gp-0 from) (process->ppointer self))
             (set! (-> gp-0 num-params) 0)
             (set! (-> gp-0 message) 'start-shooting)
             (set! a1-2 gp-0)
             )
           (send-event-function (process-by-name "port-turret-1" *active-pool*) (the-as event-message-block a1-2))
           (set! (-> self num-shots-available) 5.0)
           (set! (-> self turret-state) (the-as uint 6))
           )
         (case (-> self turret-state)
           ((2)
            (when (= (-> self ships-launched) 1)
              (play-sound-file "TORN010.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
              (set! (-> self next-turret-state) (the-as uint 3))
              (set! (-> self turret-state) (the-as uint 8))
              )
            )
           ((3)
            (cond
              ((not (is-any-sound-playing?))
                (set! (-> self turret-state) (the-as uint 4))
                )
              (else
                (set! (-> self target-y) 14563.556)
                ) 
              )
            )
           ((4)
            (play-sound-file "TORN011.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
            (set! (-> self next-turret-state) (the-as uint 5))
            (set! (-> self turret-state) (the-as uint 7))
            )
           ((5)
            (set! (-> self ships-launched) 0)
            (send-event (process-by-name "port-turret-1" *active-pool*) 'start-shooting)
            (set! (-> self num-shots-available) 5.0)
            (set! (-> self target-y) 0.0)
            (play-sound-file "TORN012.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
            (set! (-> self turret-state) (the-as uint 6))
            )
           ((6)
            (manage-torn-turret self (the-as none a1-2) (the-as float a2-2))
            )
           ((8)
            (when (is-any-sound-playing?)
              (set! (-> self turret-state) (-> self next-turret-state))
              (set! (-> self next-turret-state) (the-as uint 1))
              )
            )
           ((7)
            (when (not (is-any-sound-playing?))
              (set! (-> self turret-state) (-> self next-turret-state))
              (set! (-> self next-turret-state) (the-as uint 1))
              )
            )
           ((1)
            (format 0 "~A invalid-state~%" (-> self name))
            )
           )
         )
       )
      )
    (let ((t9-19 (-> (method-of-type base-turret idle) trans)))
      (if t9-19
          (t9-19)
          )
      )
    )
  :post (behavior ()
    (if (name= (-> self name) "port-turret-2")
        (quaternion-copy!
          (-> (the-as port-turret (-> (the-as quaternion (-> self torn)) x)) root quat)
          (-> self root quat)
          )
        )
    (let ((t9-2 (-> (method-of-type base-turret idle) post)))
      (if t9-2
          ((the-as (function none) t9-2))
          )
      )
    )
  )

(defstate active (port-turret)
  :virtual #t
  :trans (behavior ()
    (let ((t9-0 (-> (method-of-type base-turret active) trans)))
      (if t9-0
          (t9-0)
          )
      )
    (when (or (!= (-> self path-u) 1.0) (not (-> self enable-controls)))
      (set-time! (-> self first-ship-launched))
      (set-time! (-> self last-ship-launched))
      )
    (when (and (-> self enable-controls) (< (-> self roty) -12743.111))
      (set! (-> self roty-min) (-> self roty))
      (when (< (-> self roty-min) -12925.155)
        (set-time! (-> self first-ship-launched))
        (set-time! (-> self last-ship-launched))
        )
      )
    (when (>= (+ (current-time) (seconds -1.2)) (-> self last-shot-gained))
      (set-time! (-> self last-shot-gained))
      (seek! (-> self num-shots-available) 5.0 (-> self clock time-adjust-ratio))
      )
    (cond
      ((>= (+ (current-time) (seconds -90)) (-> self first-ship-launched))
       (let ((v1-34 (-> self last-speech)))
         (cond
           ((zero? v1-34)
            (when (= (-> self ships-launched) 1)
              (when (not (is-any-sound-playing?))
                (play-sound-file "TORN060.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
                (set! (-> self last-speech) (the-as uint 1))
                )
              )
            (when (= (-> self ships-launched) 0)
              (set! (-> self last-speech) (the-as uint 1))
              )
            )
           ((= v1-34 1)
            (set! (-> self last-speech) (the-as uint 2))
            )
           ((= v1-34 2)
            (if (not (is-any-sound-playing?))
              (set! (-> self last-speech) (the-as uint 3))
              )   
            )
           ((= v1-34 3)
            (when (and (zero? (-> self ships-launched)) (not (is-any-sound-playing?)))
              (let ((v1-43 (rand-vu-int-count 2)))
                (cond
                  ((zero? v1-43)
                    (play-sound-file "TORN061.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
                   )
                  ((= v1-43 1)
                    (play-sound-file "TORN062.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
                   )
                  )
                )
              (set! (-> self last-speech) (the-as uint 4))
              )
            )
           ((= v1-34 4)
            (if (is-any-sound-playing?)
              (set! (-> self last-speech) (the-as uint 5))
              )
            )
           ((= v1-34 5)
            (when (not (is-any-sound-playing?))
              (set! (-> self path-mode) (the-as uint 2))
              (set! (-> self roty-min) 0.0)
              (set! (-> self roty-max) 0.0)
              (set! (-> self available-for-pickup) #f)
              (remove-setting! 'music) ;; Added - Stop the music after beating the mission (Not in original)
              (process-spawn scene-player :init scene-player-init "city-protect-blimp-res" #t #f)
              (set! (-> self last-speech) (the-as uint 6)) ;; Added - New state which fixes an black screen softlock after the cutscene ends
              )
            )
          ((= v1-34 6) ;; Added - New state which fixes an black screen softlock after the cutscene ends
            (go-virtual shutdown)
            (send-event *target* 'end-mode)
            (set! (-> self path-u) 0.0) ;; Set turret's path position to the start
            )
           )
         )
       )
      (else
        (when (>= (+ (current-time) (seconds -2.5)) (-> self last-ship-launched))
          (process-spawn port-metal-head-boat (< 25.0 (rand-vu-float-range 0.0 50.0)) :to self)
          (set-time! (-> self last-ship-launched))
          (+! (-> self ships-launched) 1)
          (if (zero? (-> self total-ships-launched))
            (play-sound-file "TORN014.wav" (the int (* (-> *setting-control* user-default dialog-volume) 100.0)))
            (set-setting! 'music 'danger4 0.0 0) ;; Added - Play a music during the mission
            )
          (+! (-> self total-ships-launched) 1)
          (if (< 7 (-> self ships-launched))
            (new-wave-speech self)
            )
          )
        )
      )
    )
  )
