;;-*-Lisp-*-
(in-package goal)

(deftype sig6-course (bot-course)
  ()
  )

(deftype sig-sewer (sig)
  ((sig6-course           sig6-course :overlay-at course)
    (alt-actor-max-count  int32)
    )
  (:methods
    (init-alt-actor! (_type_) none)
    )
  )

(defmethod attacked-by-player? ((this sig-sewer) (arg0 process-focusable))
  "Were we attacked by the player?"
  (the-as
    symbol
    (and (and arg0 (not (logtest? (-> arg0 focus-status) (focus-status disable dead ignore grabbed))))
         (or (and (logtest? (process-mask enemy) (-> arg0 mask)) (not (logtest? (bot-flags bf26) (-> this bot-flags))))
             (and (logtest? (-> arg0 mask) (process-mask target)) (logtest? (-> this bot-flags) (bot-flags attacked)))
             )
         )
    )
  )

(defmethod enemy-method-86 ((this sig-sewer))
  (let ((gp-0 (-> this root)))
    (when (< (-> gp-0 transv y) 0.0)
      (let ((a1-0 (new 'stack-no-clear 'collide-query)))
        (find-ground (-> this root) a1-0 (collide-spec backgnd) 8192.0 81920.0 1024.0)
        )
      (>= (-> gp-0 gspot-pos y) (-> gp-0 trans y))
      )
    )
  )

(defmethod init-alt-actor! ((this sig-sewer))
  (local-vars (tag res-tag))
  (set! tag (new 'static 'res-tag))
  (let ((res-data (res-lump-data (-> this entity) 'alt-actor pointer :tag-ptr (& tag))))
    (cond
      ((and res-data (nonzero? (-> tag elt-count)))
        (set! (-> this alt-actor-max-count) (the-as int (-> tag elt-count)))
        (format 0 "alt-actor-max-count: ~D~%" (-> this alt-actor-max-count))
        )
      (else
        (set! (-> this alt-actor-max-count) 0)
        )
      )
    )
  (none)
  )

(defmethod init! ((this sig-sewer))
  "Set defaults for various fields."
  (let ((t9-0 (method-of-type sig init!)))
    (t9-0 this)
    )
  (set! (-> this alt-actor-max-count) 0)
  (init-alt-actor! this)
  (none)
  )

(defmethod go-idle ((this sig-sewer))
  (cond
    ((task-node-closed? (game-task-node sewer-sig-protect))
     (cleanup-for-death this)
     (go (method-of-object this die-fast))
     )
    (else
      (go (method-of-object this waiting-close))
      )
    )
  (none)
  )
