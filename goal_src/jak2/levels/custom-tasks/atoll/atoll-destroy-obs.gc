;;-*-Lisp-*-
(in-package goal)

(declare-type sew-gunturret enemy)
(define *can-turn-valve?* #f)

(defskelgroup skel-pal-gun-turret pal-gun-turret pal-gun-turret-lod0-jg pal-gun-turret-idle-ja
              ((pal-gun-turret-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defskelgroup skel-pal-gun-turret-explode pal-gun-turret pal-gun-turret-explode-lod0-jg pal-gun-turret-explode-idle-ja
              ((pal-gun-turret-explode-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 15)
              )

(define *atoll-gunturret-enemy-info*
  (new 'static 'enemy-info
    :use-die-falling #f
    :use-victory #f
    :use-jump-blocked #f
    :debug-draw-neck #f
    :jump-debug-draw #f
    :move-to-ground #f
    :hover-if-no-ground #f
    :idle-anim-script (new 'static 'array idle-control-frame 4
      (new 'static 'idle-control-frame :command (ic-cmd play) :anim #x2 :param0 #x2 :param1 #x2)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      (new 'static 'idle-control-frame)
      )
    :idle-anim 2
    :notice-anim 2
    :hostile-anim 2
    :hit-anim 2
    :knocked-anim -1
    :knocked-land-anim -1
    :die-anim 2
    :die-falling-anim -1
    :victory-anim -1
    :jump-wind-up-anim -1
    :jump-in-air-anim -1
    :jump-land-anim -1
    :neck-joint -1
    :notice-distance (meters 150)
    :notice-distance-delta (meters 10)
    :proximity-notice-distance (meters 150)
    :default-hit-points 1
    :gnd-collide-with (collide-spec backgnd)
    :overlaps-others-collide-with-filter (collide-spec jak bot player-list)
    :movement-gravity (meters -100)
    :friction 0.8
    :attack-shove-back (meters 3)
    :attack-shove-up (meters 2)
    :attack-mode 'generic
    :attack-damage 2
    :jump-height-min (meters 3)
    :jump-height-factor 0.5
    :knocked-seek-ry-clamp 2730.6667
    :knocked-soft-vxz-lo 72089.6
    :knocked-soft-vxz-hi 108134.4
    :knocked-soft-vy-lo 81920.0
    :knocked-soft-vy-hi 122880.0
    :knocked-medium-vxz-lo 147456.0
    :knocked-medium-vxz-hi 196608.0
    :knocked-medium-vy-lo 135168.0
    :knocked-medium-vy-hi 151552.0
    :knocked-hard-vxz-lo 78643.2
    :knocked-hard-vxz-hi 117964.8
    :knocked-hard-vy-lo 183500.8
    :knocked-hard-vy-hi 209715.2
    :knocked-huge-vxz-lo 164659.2
    :knocked-huge-vxz-hi 249036.8
    :knocked-huge-vy-lo 183500.8
    :knocked-huge-vy-hi 217907.2
    :knocked-yellow-vxz-lo 40960.0
    :knocked-yellow-vxz-hi 49152.0
    :knocked-yellow-vy-lo 57344.0
    :knocked-yellow-vy-hi 81920.0
    :knocked-red-vxz-lo 24576.0
    :knocked-red-vxz-hi 196608.0
    :knocked-red-vy-lo 94208.0
    :knocked-red-vy-hi 151552.0
    :knocked-blue-vxz-lo 40960.0
    :knocked-blue-vxz-hi 49152.0
    :knocked-blue-vy-lo 24576.0
    :knocked-blue-vy-hi 81920.0
    :shadow-size (meters 1)
    :shadow-max-y (meters 1)
    :shadow-min-y (meters -1)
    :shadow-locus-dist (meters 150)
    :gem-joint -1
    :gem-offset (new 'static 'sphere :r 163840.0)
    )
  )

(set! (-> *atoll-gunturret-enemy-info* fact-defaults) *fact-info-enemy-defaults*)

(deftype atoll-gunturret (sew-gunturret)
  ()
  )

;; WARN: Return type mismatch object vs none.
(defmethod go-idle ((this atoll-gunturret))
  (cond
    ((task-node-closed? (game-task-node atoll-destroy-turrets-destroy))
     (cleanup-for-death this)
     (go (method-of-object this die-fast))
     )
    (else
      (go (method-of-object this idle))
      )
    )
  (none)
  )

(defmethod init-turret-params! ((this atoll-gunturret))
  (let ((turret-params
          (new 'static 'gun-turret-params
            :idle-anim 2
            :shoot-anim 3
            :track-joint 6
            :barrel-joint 4
            :gun-joint 5
            :hole-joints (new 'static 'array int32 8 7 8 9 10 11 12 13 14)
            )
          )
        )
    (set! (-> turret-params normal-sg)
          (the-as skeleton-group (art-group-get-by-name *level* "skel-pal-gun-turret" (the-as (pointer uint32) #f)))
          )
    (set! (-> turret-params explode-sg)
          (the-as
            skeleton-group
            (art-group-get-by-name *level* "skel-pal-gun-turret-explode" (the-as (pointer uint32) #f))
            )
          )
    (set! (-> turret-params enemy-info) *atoll-gunturret-enemy-info*)
    (set! (-> this params) turret-params)
    )
  0
  (none)
  )

(deftype atoll-turn-valve (process-drawable)
  ((joint              joint-mod-rotate-local)
   (actor-group        (pointer actor-group))
   (actor-group-count  int32)
   (water-height       float)
   (spin               float)
   (spin-rate          float)
   )
  (:state-methods
    idle
    turn
    )
  )


(defskelgroup skel-atoll-valve atoll-valve atoll-valve-lod0-jg atoll-valve-idle-ja
              ((atoll-valve-lod0-mg (meters 20)) (atoll-valve-lod1-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 1)
              :origin-joint-index 3
              )

(defstate idle (atoll-turn-valve)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('attack)
       (case (-> (the-as attack-info (-> block param 1)) mode)
         (('spin 'punch 'flop 'uppercut)
          (if *can-turn-valve?*
            (go-virtual turn)
            )
          )
         )
       )
      )
    )
  :code transform-and-sleep
  )

(defstate turn (atoll-turn-valve)
  :virtual #t
  :enter (behavior ()
    (set! (-> self joint enable) #t)
    (set! (-> self spin-rate) 196608.0)
    (logclear! (-> self mask) (process-mask actor-pause))
    (sound-play "sew-valve")
    (set! *can-turn-valve?* #f)
    (task-node-close! (game-task-node atoll-destroy-turrets-turn-on-valve))
    (set-time! (-> self state-time))
    )
  :exit (behavior ()
    (set! (-> self joint enable) #f)
    (logior! (-> self mask) (process-mask actor-pause))
    )
  :trans (behavior ()
    (when (time-elapsed? (-> self state-time) (seconds 2))
      (go-virtual idle)
      )
    )
  :code sleep-code
  :post (behavior ()
    (seek! (-> self spin-rate) 0.0 (* 81920.0 (seconds-per-frame)))
    (+! (-> self spin) (* (-> self spin-rate) (seconds-per-frame)))
    (quaternion-axis-angle! (-> self joint rotation) 0.0 0.0 1.0 (-> self spin))
    (ja-post)
    )
  )

(defmethod relocate ((this atoll-turn-valve) (offset int))
  (if (nonzero? (-> this joint))
      (&+! (-> this joint) offset)
      )
  (call-parent-method this offset)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! ((this atoll-turn-valve) (entity entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
   This commonly includes things such as:
   - stack size
   - collision information
   - loading the skeleton group / bones
   - sounds"
  (local-vars (tag-1 res-tag) (tag-2 res-tag))
  (let ((cshape (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> cshape dynam) (copy *standard-dynamics* 'process))
    (set! (-> cshape reaction) cshape-reaction-default)
    (set! (-> cshape no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (let ((prim-sphere (new 'process 'collide-shape-prim-sphere cshape (the-as uint 0))))
      (set! (-> prim-sphere prim-core collide-as) (collide-spec obstacle))
      (set! (-> prim-sphere prim-core collide-with) (collide-spec jak player-list))
      (set! (-> prim-sphere prim-core action) (collide-action solid))
      (set! (-> prim-sphere transform-index) 3)
      (set-vector! (-> prim-sphere local-sphere) 0.0 0.0 1638.4 3276.8)
      (set! (-> cshape total-prims) (the-as uint 1))
      (set! (-> cshape root-prim) prim-sphere)
      )
    (set! (-> cshape nav-radius) (* 0.75 (-> cshape root-prim local-sphere w)))
    (let ((root-prim (-> cshape root-prim)))
      (set! (-> cshape backup-collide-as) (-> root-prim prim-core collide-as))
      (set! (-> cshape backup-collide-with) (-> root-prim prim-core collide-with))
      )
    (set! (-> this root) cshape)
    )
  (process-drawable-from-entity! this entity)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-atoll-valve" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> this spin) 0.0)
  (set! (-> this spin-rate) 0.0)
  (set! (-> this joint) (new 'process 'joint-mod-rotate-local this 4 #f))
  (go (method-of-object this idle))
  (none)
  )