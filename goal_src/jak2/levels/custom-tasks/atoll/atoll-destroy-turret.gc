;;-*-Lisp-*-
(in-package goal)

(defmethod draw ((this hud-turret))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 457.0 (* 130.0 (-> this offset))))
    205
    )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) -19 22)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values ((this hud-turret))
  (set! (-> this values 0 target) (the int (-> *game-info* counter)))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback ((this hud-turret))
  (set! (-> this level) (level-get *level* 'latoturret))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-middle-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  
  ;; couldn't figure out how to use the sewer's turret HUD in there
  (set! (-> this sprites 0 tex) (lookup-texture-by-name "hud-gunturret-01" (the-as string #f) (the-as (pointer texture-page) #f)))
  (set! (-> this sprites 0 flags) (the-as uint 4))
  (set! (-> this sprites 0 scale-x) 1.2)
  (set! (-> this sprites 0 scale-y) 1.2)
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 0.6)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  0
  (none)
  )

(deftype atoll-gunturret-manager (process)
  ((manager-entity     entity-actor)
   (turret-max-count   int32)
   (hud-counter        handle)
   (rod-of-god         handle)
   (minimap            connection-minimap)
   (gui-id             sound-id)
   (trans              vector  :inline)
   (state-time         time-frame)
   (played-dax-hint?   symbol)
   (arrow-pos          vector  :inline)
   )
  (:states
    idle
    turn-on-valve
    complete
    )
  (:methods
    (init-turret-count! (_type_ entity-actor) none)
    (spawn-rod-of-god (_type_ vector) none)
    (print-text (_type_ text-id) none)
    )
  )

(defmethod init-turret-count! ((this atoll-gunturret-manager) (arg0 entity-actor))
  (local-vars (res res-tag))
  (set! res (new 'static 'res-tag))
  (let ((actor (entity-by-name "atoll-gunturret-manager-1")))
    (when actor
      (set! (-> this manager-entity) (the-as entity-actor actor))
      (let ((res-data (res-lump-data arg0 'alt-actor pointer :tag-ptr (& res))))
        (cond
          ((and res-data (nonzero? (-> res elt-count)))
            (set! (-> this turret-max-count) (the-as int (-> res elt-count)))
            (format 0 "turret-max-count: ~D~%" (-> this turret-max-count))
            )
          (else
            (set! (-> this turret-max-count) 0)
            (go process-drawable-art-error "missing atoll-gunturret-manager alt-actor")
            )
          )
        )
      )
    )
  (none)
  )

(defmethod spawn-rod-of-god ((this atoll-gunturret-manager) (arg0 vector))
  (let ((arrow (new 'stack-no-clear 'task-arrow-params)))
    (set! (-> arrow pos quad) (-> arg0 quad))
    (quaternion-identity! (-> arrow quat))
    (set! (-> arrow flags) (task-arrow-flags))
    (set! (-> arrow map-icon) (the-as uint 15))
    (set! (-> this rod-of-god) (process->handle (task-arrow-spawn arrow this)))
    )
  (none)
  )

(defmethod print-text ((this atoll-gunturret-manager) (arg0 text-id))
  (when (= (get-status *gui-control* (-> this gui-id)) (gui-status active))
    (let ((s5-1
            (new 'stack 'font-context *font-default-matrix* 32 290 0.0 (font-color default) (font-flags shadow kerning))
            )
          )
      (set! (-> s5-1 flags) (font-flags shadow kerning middle middle-vert large))
      (set-width! s5-1 440)
      (set-height! s5-1 80)
      (set-scale! s5-1 0.7)
      (let ((s4-0 print-game-text))
        (format (clear *temp-string*) (lookup-text! *common-text* arg0 #f))
        (s4-0 *temp-string* s5-1 #f 44 (bucket-id progress))
        )
      )
    )
  (none)
  )

(defstate idle (atoll-gunturret-manager)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('turret-die)
        ;;(+! (-> self turret-count) -1)
        )
      )
    )
  :enter (behavior ()
    (set! (-> self hud-counter) (ppointer->handle (process-spawn hud-turret :init hud-init-by-other :to self)))
    )
  :exit (behavior ()
    (when (-> self hud-counter)
      (send-event (handle->process (-> self hud-counter)) 'hide-and-die)
      (set! (-> self hud-counter) (the-as handle #f))
      )
    )
  :trans (behavior ()
    (let* ((actor (the-as entity-actor #f))
           (turret-count 0)
            )
      (dotimes (i (-> self turret-max-count))
        (set! actor (entity-actor-lookup (-> self manager-entity) 'alt-actor i))
        (when (and actor (not (logtest? (-> actor extra perm status) (entity-perm-status dead))))
          (+! turret-count 1)
          (add-icon! *minimap* self (the-as uint 16) (the-as int #f) (the-as vector actor) 0)
          )
        )
      (set! (-> *game-info* counter) (the float turret-count))
      ;(format *stdcon* "turret-count: ~D~%" turret-count)
      (when (zero? turret-count)
        (when (-> self hud-counter)
          (send-event (handle->process (-> self hud-counter)) 'hide-and-die)
          (set! (-> self hud-counter) (the-as handle #f))
          )
        (task-node-close! (game-task-node atoll-destroy-turrets-destroy))
        (talker-spawn-func (-> *talker-speech* 465) *entity-pool* (target-pos 0) (the-as region #f)) ;; Daxter: "Oh right!"
        (go turn-on-valve)
        )
      )
    )
  :code sleep-code
  )

(defstate turn-on-valve (atoll-gunturret-manager)
  :enter (behavior ()
    (set! *can-turn-valve?* #t)
    (spawn-rod-of-god self (-> self arrow-pos))
    (set-time! (-> self state-time))
    )
  :exit (behavior ()
    (when (-> self rod-of-god)
      (send-event (handle->process (-> self rod-of-god)) 'leave)
      (set! (-> self rod-of-god) (the-as handle #f))
      )
    )
  :trans (behavior ()
    (when (-> self rod-of-god)
      (when (< (vector-vector-distance (-> self arrow-pos) (target-pos 0)) 12288.0)
        (send-event (handle->process (-> self rod-of-god)) 'leave)
        (set! (-> self rod-of-god) (the-as handle #f))
        )
      )
    (when (= (-> self rod-of-god) (the-as handle #f))
      (when (> (vector-vector-distance (-> self arrow-pos) (target-pos 0)) 12288.0) ;; 12300.0
        (spawn-rod-of-god self (-> self arrow-pos))
        )
      )
    (when (time-elapsed? (-> self state-time) (seconds 3))
      (if (not (-> self played-dax-hint?))
        (talker-spawn-func (-> *talker-speech* 466) *entity-pool* (target-pos 0) (the-as region #f)) ;; Daxter valve hint
        (set! (-> self played-dax-hint?) #t)
        )
      )
    (when (task-node-closed? (game-task-node atoll-destroy-turrets-turn-on-valve))
      (go complete)
      )
    )
  :code sleep-code
  )

(defstate complete (atoll-gunturret-manager)
  :code sleep-code
  )

(defmethod init-from-entity! ((this atoll-gunturret-manager) (arg0 entity-actor))
  (vector-copy! (-> this trans) (-> arg0 trans))
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this turret-max-count) 0)
  (set! (-> this hud-counter) (the-as handle #f))
  (set! (-> this rod-of-god) (the-as handle #f))
  (set! (-> this minimap) #f)
  (set! (-> this played-dax-hint?) #f)
  (vector-copy! (-> this arrow-pos) (new 'static 'vector :x (meters 376.16) :y (meters 48.38) :z (meters -1055.82) :w 1.0))
  (init-turret-count! this arg0)
  (cond
    ((and (task-node-closed? (game-task-node atoll-destroy-turrets-destroy)) (not (task-node-closed? (game-task-node atoll-destroy-turrets-turn-on-valve))))
      (go turn-on-valve)
      )
    ((task-node-closed? (game-task-node atoll-destroy-turrets-turn-on-valve))
      (go complete)
      )
    (else
      (go idle)
      )
    )
  (none)
  ) 